import { Markup, Telegraf } from "telegraf";
import { BotContext } from "./shared/context";
import { COURSES } from "./shared/constants";
import { PARENT_NAME_SCENE } from "./scenes";
import { RegistrationForm, RegistrationType } from "./shared/types/registration";
import { db } from "./db/connection";
import { registrationsTable } from "./db/schema";
import { and, asc, desc, eq } from "drizzle-orm";
import * as moment from 'moment'

enum CallbackAction {
  INFO = 'info',
  COURSE_REGISTER = 'course_register',
  TRIAL_LESSON_REGISTER = 'trial_lesson_register',
}

export function initBot(bot: Telegraf<BotContext>) {
  bot.command('start', async (ctx) => {
    return ctx.replyWithHTML(`üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>

–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ —Å–µ–º–µ–π–Ω–æ–º –∫–ª—É–±–µ ¬´Pix–ò–∫–∏¬ª! üéâ
–° —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞ —Å—Ç–∞—Ä—Ç—É—é—Ç –∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ, 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 4 –¥–æ 18 –ª–µ—Ç.
–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b> –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—É—Ä—Å–∞—Ö!`, 
    Markup.inlineKeyboard([
      [Markup.button.callback('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö', CallbackAction.INFO)],
      [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å', CallbackAction.COURSE_REGISTER)],
      [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', CallbackAction.TRIAL_LESSON_REGISTER)],
    ]));
  });

  bot.action(CallbackAction.INFO, async (ctx) => {
    await ctx.answerCbQuery();

    return ctx.replyWithHTML(`<b>ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞</b> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞–º–∏, —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ –º–æ—Ç–æ—Ä–∏–∫–∏
<b>Junior</b> (4‚Äì8 –ª–µ—Ç) ‚Äî LEGO WeDo 2.0, Scratch, –æ—Å–Ω–æ–≤—ã 3D-–ø–µ—á–∞—Ç–∏.
<b>Smart</b> (9‚Äì12 –ª–µ—Ç) ‚Äî LEGO Spike Prime, —É–≥–ª—É–±–ª—ë–Ω–Ω–∞—è 3D-–ø–µ—á–∞—Ç—å.

<b>üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –∏ —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
<b>Puzzle</b> (7‚Äì9 –ª–µ—Ç) ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ (Scratch, Minecraft, Kodu), –º–∏–Ω–∏-–∏–≥—Ä—ã.
<b>BaseIt</b> (9‚Äì10 –ª–µ—Ç) ‚Äî Scratch, Minecraft (MCreator), Roblox Studio, Construct 3.
<b>CodeUp</b> (10‚Äì12 –ª–µ—Ç) ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∫–æ–¥—É: JavaScript, Python (PyGame).
<b>GameDev</b> (11‚Äì16 –ª–µ—Ç) ‚Äî 2D/3D –∏–≥—Ä—ã, —á–∞—Ç-–±–æ—Ç—ã (Unity, Python, Blender).
<b>WebLab</b> (11‚Äì16 –ª–µ—Ç) ‚Äî –¥–∏–∑–∞–π–Ω –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ (Figma, HTML/CSS, JS, Tilda).

<b>üß© 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—á–∞—Ç—å</b> - –æ—Å–≤–æ–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
<b>Start</b> (7‚Äì10 –ª–µ—Ç) ‚Äî —Å—É–≤–µ–Ω–∏—Ä—ã, –∏–≥—Ä—É—à–∫–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂–∏.
<b>Core</b> (10‚Äì14 –ª–µ—Ç) ‚Äî —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏: —Ñ–∏–≥—É—Ä–∫–∏, —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫–∑–æ—Å–∫–µ–ª–µ—Ç–∞.
<b>Complex</b> (12‚Äì16 –ª–µ—Ç) ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞, –æ–ª–∏–º–ø–∏–∞–¥—ã.

<b>üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫—É—Ä—Å (–¥–ª—è –º–∞–ª—ã—à–µ–π —Å 4 –ª–µ—Ç)</b> ‚Äî —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–ª—É—Ö–∞, —Ä–∏—Ç–º–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º—É–∑—ã–∫—É.

<b>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å (–¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 6 –¥–æ 12 –ª–µ—Ç)</b> ‚Äî –æ—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –ø–æ–Ω–∏–º–∞–Ω–∏–µ.
`, 
    Markup.inlineKeyboard([
      [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å', CallbackAction.COURSE_REGISTER)],
      [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', CallbackAction.TRIAL_LESSON_REGISTER)],
    ]));
  });

  bot.action(CallbackAction.COURSE_REGISTER, async (ctx) => {
    await ctx.answerCbQuery();
    
    return ctx.replyWithHTML('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∑–∞–ø–∏—Å–∏', Markup.inlineKeyboard([
      ...COURSES.map((course) => [Markup.button.callback(course.name, `course:${course.code}`)]),
    ]));
  });

  bot.action(/^course:([a-zA-Z0-9]+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.deleteMessageOrClearReplyMarkup();

    const courseCode = ctx.match[1];
    const course = COURSES.find((course) => course.code === courseCode)!;
    
    const courseRegistrations = await db
      .select()
      .from(registrationsTable)
      .where(
        and(
          eq(registrationsTable.tgId, ctx.from.id),
          eq(registrationsTable.type, RegistrationType.COURSE),
        )
      );
    const currentCourseRegistrations = courseRegistrations.filter((registration) => registration.data?.courseCode === course.code);
    if (currentCourseRegistrations.length >= 3) {
      return ctx.replyWithHTML('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ 3 –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å');
    }

    const initialState: RegistrationForm = {
      type: RegistrationType.COURSE,
      courseCode: course.code,
    }
    return ctx.scene.enter(PARENT_NAME_SCENE, initialState)
  });

  bot.action(CallbackAction.TRIAL_LESSON_REGISTER, async (ctx) => {
    await ctx.answerCbQuery();

    return ctx.replyWithHTML('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', Markup.inlineKeyboard([
      ...COURSES.map((course) => [Markup.button.callback(course.name, `trial_lesson:${course.code}`)]),
    ]));
  });

  bot.action(/^trial_lesson:([a-zA-Z0-9]+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.deleteMessageOrClearReplyMarkup();

    const courseCode = ctx.match[1];
    const course = COURSES.find((course) => course.code === courseCode)!;
    console.log(course);
    
    const trialLessonRegistrations = await db
      .select()
      .from(registrationsTable)
      .where(
        and(
          eq(registrationsTable.tgId, ctx.from.id),
          eq(registrationsTable.type, RegistrationType.TRIAL_LESSON),
        )
      );
    const currentTrialLessonRegistrations = trialLessonRegistrations.filter((registration) => registration.data?.courseCode === course.code);
    if (currentTrialLessonRegistrations.length >= 3) {
      return ctx.replyWithHTML('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ 3 –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É');
    }
    
    const initialState: RegistrationForm = {
      type: RegistrationType.TRIAL_LESSON,
      courseCode: course.code,
    }
    return ctx.scene.enter(PARENT_NAME_SCENE, initialState)
  });

  bot.command('registrations', async (ctx) => {
    const registrations = await db
      .select()
      .from(registrationsTable)
      .where(
        eq(registrationsTable.tgId, ctx.from.id),
      )
      .orderBy(asc(registrationsTable.createdAt));
    
    if (registrations.length === 0) {
      return ctx.replyWithHTML('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã –∏–ª–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏', Markup.inlineKeyboard([
        [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å', CallbackAction.COURSE_REGISTER)],
        [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', CallbackAction.TRIAL_LESSON_REGISTER)],
      ]));
    }

    return ctx.replyWithHTML(`<i>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:</i>

${registrations.map((registration, index) => `<b>${index + 1}. ${registration.type === RegistrationType.COURSE ? `–ö—É—Ä—Å` : `–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫`} ¬´${COURSES.find((course) => course.code === registration.data?.courseCode)?.name}¬ª</b> 
${registration.data?.childName ? `–ò–º—è —Ä–µ–±–µ–Ω–∫–∞: <i>${registration.data?.childName}</i>` : ''}
${registration.data?.childAge ? `–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: <i>${registration.data?.childAge}</i>` : ''}
${registration?.data?.type === RegistrationType.TRIAL_LESSON && registration?.data?.selectedLessonTime ? `–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞: <i>${moment(new Date(registration.data?.selectedLessonTime)).format('DD.MM.YYYY –≤ HH:mm')}</i>` : ''}`).join('\n\n')}`, 
    Markup.inlineKeyboard([
      [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å', CallbackAction.COURSE_REGISTER)],
      [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', CallbackAction.TRIAL_LESSON_REGISTER)],
    ]));
  });
}