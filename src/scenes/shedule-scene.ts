import { BotContext } from '~/shared/context';
import { Markup, Scenes } from 'telegraf';
import { RegistrationForm, RegistrationType } from '~/shared/types/registration';
import { COURSES, MANAGE_CHAT_ID } from '~/shared/constants';
import { alphacrmService } from '~/services/alphacrm';
import { registrationsTable } from '~/db/schema';
import { db } from '~/db/connection';
import * as moment from 'moment';

export const SCHEDULE_SCENE = 'SCHEDULE_SCENE';
export const scheduleScene = new Scenes.BaseScene<BotContext<RegistrationForm>>(SCHEDULE_SCENE);

enum CallbackAction {
  REFRESH = 'refresh',
}

scheduleScene.enter(async (ctx) => {
  console.log(ctx.scene.session.state);
  const course = COURSES.find(course => course.code === ctx.scene.session.state.courseCode)!;
  const availableLessons = alphacrmService.getAvailableLessonsBySubjectIds(course.subjectIds).slice(0, 5);
  if (availableLessons.length === 0) {
    return ctx.replyWithHTML('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–±–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É –ø–æ–∫–∞ –Ω–µ—Ç. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è üò¢', Markup.inlineKeyboard([
      [Markup.button.callback('–û–±–Ω–æ–≤–∏—Ç—å', CallbackAction.REFRESH)],
    ]));
  }
  return ctx.replyWithHTML('–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –ø–æ—Å–µ—Ç–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', Markup.inlineKeyboard(availableLessons.map(lesson => [
    Markup.button.callback(`${moment(new Date(lesson.time_from)).format('DD.MM.YYYY HH:mm')}`, `lesson:${lesson.id}`),
  ])));
});

scheduleScene.action(CallbackAction.REFRESH, async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.deleteMessageOrClearReplyMarkup();
  return ctx.scene.enter(SCHEDULE_SCENE, ctx.scene.session.state);
});

scheduleScene.action(/^lesson:([0-9]+)$/, async (ctx) => {
  const lessonId = ctx.match[1];
  ctx.scene.session.state.selectedLessonId = Number(lessonId);
  
  await ctx.answerCbQuery();
  await ctx.deleteMessageOrClearReplyMarkup();
  const { message_id } = await ctx.reply('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å...')

  const course = COURSES.find(course => course.code === ctx.scene.session.state.courseCode)!;
  
  const state = ctx.scene.session.state as Required<RegistrationForm>; 
  const lesson = await alphacrmService.getLessonById(state.selectedLessonId);
  if (!lesson) {
    await ctx.telegram.editMessageText(ctx.from.id, message_id, undefined, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ–∫–∞ –Ω–µ—Ç üò¢');
    return ctx.scene.enter(SCHEDULE_SCENE, ctx.scene.session.state);
  }

  // const customer = await alphacrmService.createCustomer({
  //   name: state.childName,
  //   phone: `${state.parentPhone} (${state.parentName})`,
  //   note: `–í–æ–∑—Ä–∞—Å—Ç: ${state.childAge} –ª–µ—Ç. –•–æ—Ç—è—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ –∫—É—Ä—Å—É ${course.name} –Ω–∞ ${moment(new Date(lesson.time_from)).format('DD.MM.YYYY –≤ HH:mm')}`
  // })
  // await alphacrmService.addCustomerToLesson(state.selectedLessonId, customer.id)

  await ctx.telegram.sendMessage(
    MANAGE_CHAT_ID, 
    `üü° –•–æ—Ç—è—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ <b>${course.name}</b> –Ω–∞ <b>${moment(new Date(lesson.time_from)).format('DD.MM.YYYY –≤ HH:mm')}</b>

<i>–†–æ–¥–∏—Ç–µ–ª—å:</i> <code>${state.parentName}</code>
<i>–†–µ–±–µ–Ω–æ–∫:</i> <code>${state.childName}, ${state.childAge} –ª–µ—Ç</code>
<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> <code>${state.parentPhone}</code>
`,
    {
      parse_mode: 'HTML',
    }
  )

  await db.insert(registrationsTable).values({
    tgId: ctx.from.id,
    type: RegistrationType.TRIAL_LESSON,
    data: {
      ...ctx.scene.session.state,
      type: RegistrationType.TRIAL_LESSON,
      selectedLessonTime: lesson.time_from,
      // customerId: customer.id,
    },
  })

  await ctx.telegram.editMessageText(ctx.from.id, message_id, undefined, `üéâ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –Ω–∞ ${moment(new Date(lesson.time_from)).format('DD.MM.YYYY –≤ HH:mm')}! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏`, { parse_mode: 'HTML'});
  return ctx.scene.leave();
});